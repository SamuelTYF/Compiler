"class Stack{\r\n    constructor()\r\n    {\r\n        this.stack=null\r\n    }\r\n    Empty()\r\n    {\r\n        return this.stack==null\r\n    }\r\n    Push(value)\r\n    {\r\n        this.stack={\r\n            Value:value,\r\n            Last:this.stack\r\n        }\r\n    }\r\n    Pop()\r\n    {\r\n        var r=this.stack.Value\r\n        this.stack=this.stack.Last\r\n        return r\r\n    }\r\n\tTop()\r\n\t{\r\n\t\treturn this.stack.Value\r\n\t}\r\n}\r\nclass LR_Parser\r\n{\r\n    constructor()\r\n    {\r\n        this.StateStack=null\r\n        this.ValueStack=null\r\n    }\r\n    Init()\r\n    {\r\n        this.StateStack=new Stack()\r\n        this.ValueStack=new Stack()\r\n        this.StateStack.Push(0)\r\n    }\r\n    Error(token)\r\n    {\r\n        console.error(token)\r\n        return null\r\n    }\r\n    Pop(k)\r\n    {\r\n        var values=[]\r\n        for(var i=0;i<k;i++)\r\n        {\r\n            values[k-i-1]=this.ValueStack.Pop()\r\n            this.StateStack.Pop()\r\n        }\r\n        return values\r\n    }\r\n    Parse(tokenizor)\r\n    {\r\n        this.Init()\r\n        var token=tokenizor.Get()\r\n        var symbol=null\r\n        var goto=true\r\n        while(true)\r\n        {\r\n            if(goto){\r\n                switch(this.StateStack.Top())\r\n                {\r\n                    //ShiftCode\r\n                    default:\r\n                        return this.Error(token)\r\n                }\r\n            }\r\n            else\r\n            {\r\n                switch(this.StateStack.Top())\r\n                {\r\n                    //GotoCode\r\n                    default:\r\n                        return this.Error(token)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //Method\r\n}"